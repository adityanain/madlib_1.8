m4_include(`SQLCommon.m4')
/* -----------------------------------------------------------------------------
 * Test k-means.
 *
 * FIXME: Verify results
 * -------------------------------------------------------------------------- */

CREATE TABLE kmeans_2d(
	id SERIAL,
	x DOUBLE PRECISION,
	y DOUBLE PRECISION,
	position DOUBLE PRECISION[]
    m4_ifdef(`__HAWQ__', `', `, PRIMARY KEY (id)')
) m4_ifdef(`__POSTGRESQL__', `', `DISTRIBUTED BY (id)');

INSERT INTO kmeans_2d(x, y, position)
SELECT
	x, y,
	ARRAY[
		x + random() * 15.0,
		y + random() * 15.0
	]::DOUBLE PRECISION[] AS position
FROM (
	SELECT
		random() * 100.0 AS x,
		random() * 100.0 AS y
	FROM generate_series(1,10)
) AS centroids, generate_series(1,100) i;

CREATE TABLE centroids AS
SELECT position
FROM kmeans_2d
ORDER BY random()
LIMIT 10;

SELECT * FROM kmeanspp('kmeans_2d', 'position', 10);

SELECT * FROM kmeanspp('kmeans_2d', 'position', 10,
                       'MADLIB_SCHEMA.squared_dist_norm2'::VARCHAR,
                       'MADLIB_SCHEMA.avg'::VARCHAR, 20::INTEGER,
                       0.001::DOUBLE PRECISION, 0.1::DOUBLE PRECISION );

SELECT * FROM kmeanspp('kmeans_2d', 'position', 10,
                       'MADLIB_SCHEMA.squared_dist_norm2'::VARCHAR,
                       'MADLIB_SCHEMA.avg'::VARCHAR, 20::INTEGER,
                       0.001::DOUBLE PRECISION, 1.5::DOUBLE PRECISION );

SELECT * FROM kmeans_random('kmeans_2d', 'position', 10);

SELECT * FROM kmeans('kmeans_2d', 'position', 'centroids', 'position');

SELECT * FROM kmeans('kmeans_2d', 'position', ARRAY[
    ARRAY[10,10],
    ARRAY[20,20],
    ARRAY[30,30],
    ARRAY[40,40],
    ARRAY[50,50],
    ARRAY[60,60],
    ARRAY[70,70],
    ARRAY[80,80],
    ARRAY[90,90],
    ARRAY[10,10]
]::DOUBLE PRECISION[][]);

SELECT * FROM kmeans('kmeans_2d', 'position', 'centroids', 'position', 'MADLIB_SCHEMA.dist_norm1');
SELECT * FROM kmeans('kmeans_2d', 'position', 'centroids', 'position', 'MADLIB_SCHEMA.dist_norm2');
